"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.applyInputTypesEnhanceMap = exports.applyOutputTypesEnhanceMap = exports.applyModelsEnhanceMap = exports.applyRelationResolversEnhanceMap = exports.applyArgsTypesEnhanceMap = exports.applyResolversEnhanceMap = void 0;
const tslib_1 = require("tslib");
const tslib = (0, tslib_1.__importStar)(require("tslib"));
const crudResolvers = (0, tslib_1.__importStar)(require("./resolvers/crud/resolvers-crud.index"));
const argsTypes = (0, tslib_1.__importStar)(require("./resolvers/crud/args.index"));
const actionResolvers = (0, tslib_1.__importStar)(require("./resolvers/crud/resolvers-actions.index"));
const relationResolvers = (0, tslib_1.__importStar)(require("./resolvers/relations/resolvers.index"));
const models = (0, tslib_1.__importStar)(require("./models"));
const outputTypes = (0, tslib_1.__importStar)(require("./resolvers/outputs"));
const inputTypes = (0, tslib_1.__importStar)(require("./resolvers/inputs"));
const crudResolversMap = {
    Organization: crudResolvers.OrganizationCrudResolver,
    User: crudResolvers.UserCrudResolver,
    Save: crudResolvers.SaveCrudResolver,
    Address: crudResolvers.AddressCrudResolver,
    Property: crudResolvers.PropertyCrudResolver,
    Property_Request: crudResolvers.Property_RequestCrudResolver,
    Location: crudResolvers.LocationCrudResolver,
    Advertisement: crudResolvers.AdvertisementCrudResolver,
    Price: crudResolvers.PriceCrudResolver,
    LandSize: crudResolvers.LandSizeCrudResolver,
    Search: crudResolvers.SearchCrudResolver
};
const actionResolversMap = {
    Organization: {
        organization: actionResolvers.FindUniqueOrganizationResolver,
        findFirstOrganization: actionResolvers.FindFirstOrganizationResolver,
        organizations: actionResolvers.FindManyOrganizationResolver,
        createOrganization: actionResolvers.CreateOrganizationResolver,
        createManyOrganization: actionResolvers.CreateManyOrganizationResolver,
        deleteOrganization: actionResolvers.DeleteOrganizationResolver,
        updateOrganization: actionResolvers.UpdateOrganizationResolver,
        deleteManyOrganization: actionResolvers.DeleteManyOrganizationResolver,
        updateManyOrganization: actionResolvers.UpdateManyOrganizationResolver,
        upsertOrganization: actionResolvers.UpsertOrganizationResolver,
        aggregateOrganization: actionResolvers.AggregateOrganizationResolver,
        groupByOrganization: actionResolvers.GroupByOrganizationResolver
    },
    User: {
        user: actionResolvers.FindUniqueUserResolver,
        findFirstUser: actionResolvers.FindFirstUserResolver,
        users: actionResolvers.FindManyUserResolver,
        createUser: actionResolvers.CreateUserResolver,
        createManyUser: actionResolvers.CreateManyUserResolver,
        deleteUser: actionResolvers.DeleteUserResolver,
        updateUser: actionResolvers.UpdateUserResolver,
        deleteManyUser: actionResolvers.DeleteManyUserResolver,
        updateManyUser: actionResolvers.UpdateManyUserResolver,
        upsertUser: actionResolvers.UpsertUserResolver,
        aggregateUser: actionResolvers.AggregateUserResolver,
        groupByUser: actionResolvers.GroupByUserResolver
    },
    Save: {
        save: actionResolvers.FindUniqueSaveResolver,
        findFirstSave: actionResolvers.FindFirstSaveResolver,
        saves: actionResolvers.FindManySaveResolver,
        createSave: actionResolvers.CreateSaveResolver,
        createManySave: actionResolvers.CreateManySaveResolver,
        deleteSave: actionResolvers.DeleteSaveResolver,
        updateSave: actionResolvers.UpdateSaveResolver,
        deleteManySave: actionResolvers.DeleteManySaveResolver,
        updateManySave: actionResolvers.UpdateManySaveResolver,
        upsertSave: actionResolvers.UpsertSaveResolver,
        aggregateSave: actionResolvers.AggregateSaveResolver,
        groupBySave: actionResolvers.GroupBySaveResolver
    },
    Address: {
        address: actionResolvers.FindUniqueAddressResolver,
        findFirstAddress: actionResolvers.FindFirstAddressResolver,
        addresses: actionResolvers.FindManyAddressResolver,
        createAddress: actionResolvers.CreateAddressResolver,
        createManyAddress: actionResolvers.CreateManyAddressResolver,
        deleteAddress: actionResolvers.DeleteAddressResolver,
        updateAddress: actionResolvers.UpdateAddressResolver,
        deleteManyAddress: actionResolvers.DeleteManyAddressResolver,
        updateManyAddress: actionResolvers.UpdateManyAddressResolver,
        upsertAddress: actionResolvers.UpsertAddressResolver,
        aggregateAddress: actionResolvers.AggregateAddressResolver,
        groupByAddress: actionResolvers.GroupByAddressResolver
    },
    Property: {
        property: actionResolvers.FindUniquePropertyResolver,
        findFirstProperty: actionResolvers.FindFirstPropertyResolver,
        properties: actionResolvers.FindManyPropertyResolver,
        createProperty: actionResolvers.CreatePropertyResolver,
        createManyProperty: actionResolvers.CreateManyPropertyResolver,
        deleteProperty: actionResolvers.DeletePropertyResolver,
        updateProperty: actionResolvers.UpdatePropertyResolver,
        deleteManyProperty: actionResolvers.DeleteManyPropertyResolver,
        updateManyProperty: actionResolvers.UpdateManyPropertyResolver,
        upsertProperty: actionResolvers.UpsertPropertyResolver,
        aggregateProperty: actionResolvers.AggregatePropertyResolver,
        groupByProperty: actionResolvers.GroupByPropertyResolver
    },
    Property_Request: {
        property_Request: actionResolvers.FindUniqueProperty_RequestResolver,
        findFirstProperty_Request: actionResolvers.FindFirstProperty_RequestResolver,
        property_Requests: actionResolvers.FindManyProperty_RequestResolver,
        createProperty_Request: actionResolvers.CreateProperty_RequestResolver,
        createManyProperty_Request: actionResolvers.CreateManyProperty_RequestResolver,
        deleteProperty_Request: actionResolvers.DeleteProperty_RequestResolver,
        updateProperty_Request: actionResolvers.UpdateProperty_RequestResolver,
        deleteManyProperty_Request: actionResolvers.DeleteManyProperty_RequestResolver,
        updateManyProperty_Request: actionResolvers.UpdateManyProperty_RequestResolver,
        upsertProperty_Request: actionResolvers.UpsertProperty_RequestResolver,
        aggregateProperty_Request: actionResolvers.AggregateProperty_RequestResolver,
        groupByProperty_Request: actionResolvers.GroupByProperty_RequestResolver
    },
    Location: {
        location: actionResolvers.FindUniqueLocationResolver,
        findFirstLocation: actionResolvers.FindFirstLocationResolver,
        locations: actionResolvers.FindManyLocationResolver,
        createLocation: actionResolvers.CreateLocationResolver,
        createManyLocation: actionResolvers.CreateManyLocationResolver,
        deleteLocation: actionResolvers.DeleteLocationResolver,
        updateLocation: actionResolvers.UpdateLocationResolver,
        deleteManyLocation: actionResolvers.DeleteManyLocationResolver,
        updateManyLocation: actionResolvers.UpdateManyLocationResolver,
        upsertLocation: actionResolvers.UpsertLocationResolver,
        aggregateLocation: actionResolvers.AggregateLocationResolver,
        groupByLocation: actionResolvers.GroupByLocationResolver
    },
    Advertisement: {
        advertisement: actionResolvers.FindUniqueAdvertisementResolver,
        findFirstAdvertisement: actionResolvers.FindFirstAdvertisementResolver,
        advertisements: actionResolvers.FindManyAdvertisementResolver,
        createAdvertisement: actionResolvers.CreateAdvertisementResolver,
        createManyAdvertisement: actionResolvers.CreateManyAdvertisementResolver,
        deleteAdvertisement: actionResolvers.DeleteAdvertisementResolver,
        updateAdvertisement: actionResolvers.UpdateAdvertisementResolver,
        deleteManyAdvertisement: actionResolvers.DeleteManyAdvertisementResolver,
        updateManyAdvertisement: actionResolvers.UpdateManyAdvertisementResolver,
        upsertAdvertisement: actionResolvers.UpsertAdvertisementResolver,
        aggregateAdvertisement: actionResolvers.AggregateAdvertisementResolver,
        groupByAdvertisement: actionResolvers.GroupByAdvertisementResolver
    },
    Price: {
        price: actionResolvers.FindUniquePriceResolver,
        findFirstPrice: actionResolvers.FindFirstPriceResolver,
        prices: actionResolvers.FindManyPriceResolver,
        createPrice: actionResolvers.CreatePriceResolver,
        createManyPrice: actionResolvers.CreateManyPriceResolver,
        deletePrice: actionResolvers.DeletePriceResolver,
        updatePrice: actionResolvers.UpdatePriceResolver,
        deleteManyPrice: actionResolvers.DeleteManyPriceResolver,
        updateManyPrice: actionResolvers.UpdateManyPriceResolver,
        upsertPrice: actionResolvers.UpsertPriceResolver,
        aggregatePrice: actionResolvers.AggregatePriceResolver,
        groupByPrice: actionResolvers.GroupByPriceResolver
    },
    LandSize: {
        landSize: actionResolvers.FindUniqueLandSizeResolver,
        findFirstLandSize: actionResolvers.FindFirstLandSizeResolver,
        landSizes: actionResolvers.FindManyLandSizeResolver,
        createLandSize: actionResolvers.CreateLandSizeResolver,
        createManyLandSize: actionResolvers.CreateManyLandSizeResolver,
        deleteLandSize: actionResolvers.DeleteLandSizeResolver,
        updateLandSize: actionResolvers.UpdateLandSizeResolver,
        deleteManyLandSize: actionResolvers.DeleteManyLandSizeResolver,
        updateManyLandSize: actionResolvers.UpdateManyLandSizeResolver,
        upsertLandSize: actionResolvers.UpsertLandSizeResolver,
        aggregateLandSize: actionResolvers.AggregateLandSizeResolver,
        groupByLandSize: actionResolvers.GroupByLandSizeResolver
    },
    Search: {
        search: actionResolvers.FindUniqueSearchResolver,
        findFirstSearch: actionResolvers.FindFirstSearchResolver,
        searches: actionResolvers.FindManySearchResolver,
        createSearch: actionResolvers.CreateSearchResolver,
        createManySearch: actionResolvers.CreateManySearchResolver,
        deleteSearch: actionResolvers.DeleteSearchResolver,
        updateSearch: actionResolvers.UpdateSearchResolver,
        deleteManySearch: actionResolvers.DeleteManySearchResolver,
        updateManySearch: actionResolvers.UpdateManySearchResolver,
        upsertSearch: actionResolvers.UpsertSearchResolver,
        aggregateSearch: actionResolvers.AggregateSearchResolver,
        groupBySearch: actionResolvers.GroupBySearchResolver
    }
};
const crudResolversInfo = {
    Organization: ["organization", "findFirstOrganization", "organizations", "createOrganization", "createManyOrganization", "deleteOrganization", "updateOrganization", "deleteManyOrganization", "updateManyOrganization", "upsertOrganization", "aggregateOrganization", "groupByOrganization"],
    User: ["user", "findFirstUser", "users", "createUser", "createManyUser", "deleteUser", "updateUser", "deleteManyUser", "updateManyUser", "upsertUser", "aggregateUser", "groupByUser"],
    Save: ["save", "findFirstSave", "saves", "createSave", "createManySave", "deleteSave", "updateSave", "deleteManySave", "updateManySave", "upsertSave", "aggregateSave", "groupBySave"],
    Address: ["address", "findFirstAddress", "addresses", "createAddress", "createManyAddress", "deleteAddress", "updateAddress", "deleteManyAddress", "updateManyAddress", "upsertAddress", "aggregateAddress", "groupByAddress"],
    Property: ["property", "findFirstProperty", "properties", "createProperty", "createManyProperty", "deleteProperty", "updateProperty", "deleteManyProperty", "updateManyProperty", "upsertProperty", "aggregateProperty", "groupByProperty"],
    Property_Request: ["property_Request", "findFirstProperty_Request", "property_Requests", "createProperty_Request", "createManyProperty_Request", "deleteProperty_Request", "updateProperty_Request", "deleteManyProperty_Request", "updateManyProperty_Request", "upsertProperty_Request", "aggregateProperty_Request", "groupByProperty_Request"],
    Location: ["location", "findFirstLocation", "locations", "createLocation", "createManyLocation", "deleteLocation", "updateLocation", "deleteManyLocation", "updateManyLocation", "upsertLocation", "aggregateLocation", "groupByLocation"],
    Advertisement: ["advertisement", "findFirstAdvertisement", "advertisements", "createAdvertisement", "createManyAdvertisement", "deleteAdvertisement", "updateAdvertisement", "deleteManyAdvertisement", "updateManyAdvertisement", "upsertAdvertisement", "aggregateAdvertisement", "groupByAdvertisement"],
    Price: ["price", "findFirstPrice", "prices", "createPrice", "createManyPrice", "deletePrice", "updatePrice", "deleteManyPrice", "updateManyPrice", "upsertPrice", "aggregatePrice", "groupByPrice"],
    LandSize: ["landSize", "findFirstLandSize", "landSizes", "createLandSize", "createManyLandSize", "deleteLandSize", "updateLandSize", "deleteManyLandSize", "updateManyLandSize", "upsertLandSize", "aggregateLandSize", "groupByLandSize"],
    Search: ["search", "findFirstSearch", "searches", "createSearch", "createManySearch", "deleteSearch", "updateSearch", "deleteManySearch", "updateManySearch", "upsertSearch", "aggregateSearch", "groupBySearch"]
};
const argsInfo = {
    FindUniqueOrganizationArgs: ["where"],
    FindFirstOrganizationArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyOrganizationArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateOrganizationArgs: ["data"],
    CreateManyOrganizationArgs: ["data", "skipDuplicates"],
    DeleteOrganizationArgs: ["where"],
    UpdateOrganizationArgs: ["data", "where"],
    DeleteManyOrganizationArgs: ["where"],
    UpdateManyOrganizationArgs: ["data", "where"],
    UpsertOrganizationArgs: ["where", "create", "update"],
    AggregateOrganizationArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByOrganizationArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueUserArgs: ["where"],
    FindFirstUserArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyUserArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateUserArgs: ["data"],
    CreateManyUserArgs: ["data", "skipDuplicates"],
    DeleteUserArgs: ["where"],
    UpdateUserArgs: ["data", "where"],
    DeleteManyUserArgs: ["where"],
    UpdateManyUserArgs: ["data", "where"],
    UpsertUserArgs: ["where", "create", "update"],
    AggregateUserArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByUserArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueSaveArgs: ["where"],
    FindFirstSaveArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManySaveArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateSaveArgs: ["data"],
    CreateManySaveArgs: ["data", "skipDuplicates"],
    DeleteSaveArgs: ["where"],
    UpdateSaveArgs: ["data", "where"],
    DeleteManySaveArgs: ["where"],
    UpdateManySaveArgs: ["data", "where"],
    UpsertSaveArgs: ["where", "create", "update"],
    AggregateSaveArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupBySaveArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueAddressArgs: ["where"],
    FindFirstAddressArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyAddressArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateAddressArgs: ["data"],
    CreateManyAddressArgs: ["data", "skipDuplicates"],
    DeleteAddressArgs: ["where"],
    UpdateAddressArgs: ["data", "where"],
    DeleteManyAddressArgs: ["where"],
    UpdateManyAddressArgs: ["data", "where"],
    UpsertAddressArgs: ["where", "create", "update"],
    AggregateAddressArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByAddressArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniquePropertyArgs: ["where"],
    FindFirstPropertyArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyPropertyArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreatePropertyArgs: ["data"],
    CreateManyPropertyArgs: ["data", "skipDuplicates"],
    DeletePropertyArgs: ["where"],
    UpdatePropertyArgs: ["data", "where"],
    DeleteManyPropertyArgs: ["where"],
    UpdateManyPropertyArgs: ["data", "where"],
    UpsertPropertyArgs: ["where", "create", "update"],
    AggregatePropertyArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByPropertyArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueProperty_RequestArgs: ["where"],
    FindFirstProperty_RequestArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyProperty_RequestArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateProperty_RequestArgs: ["data"],
    CreateManyProperty_RequestArgs: ["data", "skipDuplicates"],
    DeleteProperty_RequestArgs: ["where"],
    UpdateProperty_RequestArgs: ["data", "where"],
    DeleteManyProperty_RequestArgs: ["where"],
    UpdateManyProperty_RequestArgs: ["data", "where"],
    UpsertProperty_RequestArgs: ["where", "create", "update"],
    AggregateProperty_RequestArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByProperty_RequestArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueLocationArgs: ["where"],
    FindFirstLocationArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyLocationArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateLocationArgs: ["data"],
    CreateManyLocationArgs: ["data", "skipDuplicates"],
    DeleteLocationArgs: ["where"],
    UpdateLocationArgs: ["data", "where"],
    DeleteManyLocationArgs: ["where"],
    UpdateManyLocationArgs: ["data", "where"],
    UpsertLocationArgs: ["where", "create", "update"],
    AggregateLocationArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByLocationArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueAdvertisementArgs: ["where"],
    FindFirstAdvertisementArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyAdvertisementArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateAdvertisementArgs: ["data"],
    CreateManyAdvertisementArgs: ["data", "skipDuplicates"],
    DeleteAdvertisementArgs: ["where"],
    UpdateAdvertisementArgs: ["data", "where"],
    DeleteManyAdvertisementArgs: ["where"],
    UpdateManyAdvertisementArgs: ["data", "where"],
    UpsertAdvertisementArgs: ["where", "create", "update"],
    AggregateAdvertisementArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByAdvertisementArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniquePriceArgs: ["where"],
    FindFirstPriceArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyPriceArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreatePriceArgs: ["data"],
    CreateManyPriceArgs: ["data", "skipDuplicates"],
    DeletePriceArgs: ["where"],
    UpdatePriceArgs: ["data", "where"],
    DeleteManyPriceArgs: ["where"],
    UpdateManyPriceArgs: ["data", "where"],
    UpsertPriceArgs: ["where", "create", "update"],
    AggregatePriceArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByPriceArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueLandSizeArgs: ["where"],
    FindFirstLandSizeArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyLandSizeArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateLandSizeArgs: ["data"],
    CreateManyLandSizeArgs: ["data", "skipDuplicates"],
    DeleteLandSizeArgs: ["where"],
    UpdateLandSizeArgs: ["data", "where"],
    DeleteManyLandSizeArgs: ["where"],
    UpdateManyLandSizeArgs: ["data", "where"],
    UpsertLandSizeArgs: ["where", "create", "update"],
    AggregateLandSizeArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByLandSizeArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueSearchArgs: ["where"],
    FindFirstSearchArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManySearchArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateSearchArgs: ["data"],
    CreateManySearchArgs: ["data", "skipDuplicates"],
    DeleteSearchArgs: ["where"],
    UpdateSearchArgs: ["data", "where"],
    DeleteManySearchArgs: ["where"],
    UpdateManySearchArgs: ["data", "where"],
    UpsertSearchArgs: ["where", "create", "update"],
    AggregateSearchArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupBySearchArgs: ["where", "orderBy", "by", "having", "take", "skip"]
};
function applyResolversEnhanceMap(resolversEnhanceMap) {
    for (const resolversEnhanceMapKey of Object.keys(resolversEnhanceMap)) {
        const modelName = resolversEnhanceMapKey;
        const crudTarget = crudResolversMap[modelName].prototype;
        const resolverActionsConfig = resolversEnhanceMap[modelName];
        const actionResolversConfig = actionResolversMap[modelName];
        if (resolverActionsConfig._all) {
            const allActionsDecorators = resolverActionsConfig._all;
            const resolverActionNames = crudResolversInfo[modelName];
            for (const resolverActionName of resolverActionNames) {
                const actionTarget = actionResolversConfig[resolverActionName].prototype;
                tslib.__decorate(allActionsDecorators, crudTarget, resolverActionName, null);
                tslib.__decorate(allActionsDecorators, actionTarget, resolverActionName, null);
            }
        }
        const resolverActionsToApply = Object.keys(resolverActionsConfig).filter(it => it !== "_all");
        for (const resolverActionName of resolverActionsToApply) {
            const decorators = resolverActionsConfig[resolverActionName];
            const actionTarget = actionResolversConfig[resolverActionName].prototype;
            tslib.__decorate(decorators, crudTarget, resolverActionName, null);
            tslib.__decorate(decorators, actionTarget, resolverActionName, null);
        }
    }
}
exports.applyResolversEnhanceMap = applyResolversEnhanceMap;
function applyArgsTypesEnhanceMap(argsTypesEnhanceMap) {
    for (const argsTypesEnhanceMapKey of Object.keys(argsTypesEnhanceMap)) {
        const argsTypeName = argsTypesEnhanceMapKey;
        const typeConfig = argsTypesEnhanceMap[argsTypeName];
        const typeClass = argsTypes[argsTypeName];
        const typeTarget = typeClass.prototype;
        applyTypeClassEnhanceConfig(typeConfig, typeClass, typeTarget, argsInfo[argsTypeName]);
    }
}
exports.applyArgsTypesEnhanceMap = applyArgsTypesEnhanceMap;
const relationResolversMap = {
    Organization: relationResolvers.OrganizationRelationsResolver,
    User: relationResolvers.UserRelationsResolver,
    Save: relationResolvers.SaveRelationsResolver,
    Address: relationResolvers.AddressRelationsResolver,
    Property: relationResolvers.PropertyRelationsResolver,
    Property_Request: relationResolvers.Property_RequestRelationsResolver,
    Advertisement: relationResolvers.AdvertisementRelationsResolver,
    Price: relationResolvers.PriceRelationsResolver,
    LandSize: relationResolvers.LandSizeRelationsResolver
};
const relationResolversInfo = {
    Organization: ["address", "members", "properties", "advertisement"],
    User: ["address", "property", "saves", "advertisement", "request", "organization"],
    Save: ["User", "Property"],
    Address: ["Organization", "User"],
    Property: ["size", "price", "likes", "owner", "organization", "advertisement"],
    Property_Request: ["priceRange", "size", "user"],
    Advertisement: ["price", "user", "organization", "property"],
    Price: ["Property", "advertisement", "Property_Request"],
    LandSize: ["Property", "Property_Request"]
};
function applyRelationResolversEnhanceMap(relationResolversEnhanceMap) {
    for (const relationResolversEnhanceMapKey of Object.keys(relationResolversEnhanceMap)) {
        const modelName = relationResolversEnhanceMapKey;
        const relationResolverTarget = relationResolversMap[modelName].prototype;
        const relationResolverActionsConfig = relationResolversEnhanceMap[modelName];
        if (relationResolverActionsConfig._all) {
            const allActionsDecorators = relationResolverActionsConfig._all;
            const relationResolverActionNames = relationResolversInfo[modelName];
            for (const relationResolverActionName of relationResolverActionNames) {
                tslib.__decorate(allActionsDecorators, relationResolverTarget, relationResolverActionName, null);
            }
        }
        const relationResolverActionsToApply = Object.keys(relationResolverActionsConfig).filter(it => it !== "_all");
        for (const relationResolverActionName of relationResolverActionsToApply) {
            const decorators = relationResolverActionsConfig[relationResolverActionName];
            tslib.__decorate(decorators, relationResolverTarget, relationResolverActionName, null);
        }
    }
}
exports.applyRelationResolversEnhanceMap = applyRelationResolversEnhanceMap;
function applyTypeClassEnhanceConfig(enhanceConfig, typeClass, typePrototype, typeFieldNames) {
    if (enhanceConfig.class) {
        tslib.__decorate(enhanceConfig.class, typeClass);
    }
    if (enhanceConfig.fields) {
        if (enhanceConfig.fields._all) {
            const allFieldsDecorators = enhanceConfig.fields._all;
            for (const typeFieldName of typeFieldNames) {
                tslib.__decorate(allFieldsDecorators, typePrototype, typeFieldName, void 0);
            }
        }
        const configFieldsToApply = Object.keys(enhanceConfig.fields).filter(it => it !== "_all");
        for (const typeFieldName of configFieldsToApply) {
            const fieldDecorators = enhanceConfig.fields[typeFieldName];
            tslib.__decorate(fieldDecorators, typePrototype, typeFieldName, void 0);
        }
    }
}
const modelsInfo = {
    Organization: ["id", "title", "isVerified", "isRegistrated", "isDeleted", "createdAt", "updatedAt"],
    User: ["id", "firstName", "lastName", "middleName", "status", "isVerified", "isRegistrated", "isDeleted", "createdAt", "updatedAt", "organizationId"],
    Save: ["id", "createdAt", "userId", "propertyId"],
    Address: ["id", "email", "mobile", "work", "office", "createdAt", "updatedAt", "organizationId", "userId"],
    Property: ["id", "type", "acquisition", "state", "images", "amenities", "parkingCapacity", "seating", "bedrooms", "bathrooms", "description", "views", "source", "region", "city", "town", "streetName", "digitalAddress", "locationDesc", "lat", "lon", "isDeleted", "createdAt", "updatedAt", "organizationId", "userId"],
    Property_Request: ["id", "type", "acquisition", "state", "amenities", "parkingCapacity", "seating", "bedrooms", "bathrooms", "additionalInfo", "region", "city", "town", "createdAt", "updatedAt", "userId"],
    Location: ["id", "region", "city", "locationInfo", "electricitySupplyRating", "waterSupplyRating", "noiseLevelSupplyRating", "crimeSupplpyRating", "recreationalRating", "trafficRating", "lat", "lon"],
    Advertisement: ["id", "isExpired", "isPaused", "createdAt", "updatedAt", "userId", "organizationId", "propertyId"],
    Price: ["id", "figure", "currency", "duration", "propertyId", "advertisementId", "property_RequestId"],
    LandSize: ["id", "measurement", "unit", "propertyId", "property_RequestId"],
    Search: ["id", "userId", "category", "type", "acquisition", "seating", "state", "bedrooms", "bathrooms", "parkingCapacity", "location", "createdAt"]
};
function applyModelsEnhanceMap(modelsEnhanceMap) {
    for (const modelsEnhanceMapKey of Object.keys(modelsEnhanceMap)) {
        const modelName = modelsEnhanceMapKey;
        const modelConfig = modelsEnhanceMap[modelName];
        const modelClass = models[modelName];
        const modelTarget = modelClass.prototype;
        applyTypeClassEnhanceConfig(modelConfig, modelClass, modelTarget, modelsInfo[modelName]);
    }
}
exports.applyModelsEnhanceMap = applyModelsEnhanceMap;
const outputsInfo = {
    AggregateOrganization: ["_count", "_min", "_max"],
    OrganizationGroupBy: ["id", "title", "isVerified", "isRegistrated", "isDeleted", "createdAt", "updatedAt", "_count", "_min", "_max"],
    AggregateUser: ["_count", "_min", "_max"],
    UserGroupBy: ["id", "firstName", "lastName", "middleName", "status", "isVerified", "isRegistrated", "isDeleted", "createdAt", "updatedAt", "organizationId", "_count", "_min", "_max"],
    AggregateSave: ["_count", "_min", "_max"],
    SaveGroupBy: ["id", "createdAt", "userId", "propertyId", "_count", "_min", "_max"],
    AggregateAddress: ["_count", "_min", "_max"],
    AddressGroupBy: ["id", "email", "mobile", "work", "office", "createdAt", "updatedAt", "organizationId", "userId", "_count", "_min", "_max"],
    AggregateProperty: ["_count", "_avg", "_sum", "_min", "_max"],
    PropertyGroupBy: ["id", "type", "acquisition", "state", "images", "amenities", "parkingCapacity", "seating", "bedrooms", "bathrooms", "description", "views", "source", "region", "city", "town", "streetName", "digitalAddress", "locationDesc", "lat", "lon", "isDeleted", "createdAt", "updatedAt", "organizationId", "userId", "_count", "_avg", "_sum", "_min", "_max"],
    AggregateProperty_Request: ["_count", "_avg", "_sum", "_min", "_max"],
    Property_RequestGroupBy: ["id", "type", "acquisition", "state", "amenities", "parkingCapacity", "seating", "bedrooms", "bathrooms", "additionalInfo", "region", "city", "town", "createdAt", "updatedAt", "userId", "_count", "_avg", "_sum", "_min", "_max"],
    AggregateLocation: ["_count", "_avg", "_sum", "_min", "_max"],
    LocationGroupBy: ["id", "region", "city", "locationInfo", "electricitySupplyRating", "waterSupplyRating", "noiseLevelSupplyRating", "crimeSupplpyRating", "recreationalRating", "trafficRating", "lat", "lon", "_count", "_avg", "_sum", "_min", "_max"],
    AggregateAdvertisement: ["_count", "_min", "_max"],
    AdvertisementGroupBy: ["id", "isExpired", "isPaused", "createdAt", "updatedAt", "userId", "organizationId", "propertyId", "_count", "_min", "_max"],
    AggregatePrice: ["_count", "_avg", "_sum", "_min", "_max"],
    PriceGroupBy: ["id", "figure", "currency", "duration", "propertyId", "advertisementId", "property_RequestId", "_count", "_avg", "_sum", "_min", "_max"],
    AggregateLandSize: ["_count", "_avg", "_sum", "_min", "_max"],
    LandSizeGroupBy: ["id", "measurement", "unit", "propertyId", "property_RequestId", "_count", "_avg", "_sum", "_min", "_max"],
    AggregateSearch: ["_count", "_avg", "_sum", "_min", "_max"],
    SearchGroupBy: ["id", "userId", "category", "type", "acquisition", "seating", "state", "bedrooms", "bathrooms", "parkingCapacity", "location", "createdAt", "_count", "_avg", "_sum", "_min", "_max"],
    AffectedRowsOutput: ["count"],
    OrganizationCount: ["members", "properties", "advertisement"],
    OrganizationCountAggregate: ["id", "title", "isVerified", "isRegistrated", "isDeleted", "createdAt", "updatedAt", "_all"],
    OrganizationMinAggregate: ["id", "title", "isVerified", "isRegistrated", "isDeleted", "createdAt", "updatedAt"],
    OrganizationMaxAggregate: ["id", "title", "isVerified", "isRegistrated", "isDeleted", "createdAt", "updatedAt"],
    UserCount: ["property", "saves", "advertisement", "request"],
    UserCountAggregate: ["id", "firstName", "lastName", "middleName", "status", "isVerified", "isRegistrated", "isDeleted", "createdAt", "updatedAt", "organizationId", "_all"],
    UserMinAggregate: ["id", "firstName", "lastName", "middleName", "status", "isVerified", "isRegistrated", "isDeleted", "createdAt", "updatedAt", "organizationId"],
    UserMaxAggregate: ["id", "firstName", "lastName", "middleName", "status", "isVerified", "isRegistrated", "isDeleted", "createdAt", "updatedAt", "organizationId"],
    SaveCountAggregate: ["id", "createdAt", "userId", "propertyId", "_all"],
    SaveMinAggregate: ["id", "createdAt", "userId", "propertyId"],
    SaveMaxAggregate: ["id", "createdAt", "userId", "propertyId"],
    AddressCountAggregate: ["id", "email", "mobile", "work", "office", "createdAt", "updatedAt", "organizationId", "userId", "_all"],
    AddressMinAggregate: ["id", "email", "mobile", "work", "office", "createdAt", "updatedAt", "organizationId", "userId"],
    AddressMaxAggregate: ["id", "email", "mobile", "work", "office", "createdAt", "updatedAt", "organizationId", "userId"],
    PropertyCount: ["likes", "advertisement"],
    PropertyCountAggregate: ["id", "type", "acquisition", "state", "images", "amenities", "parkingCapacity", "seating", "bedrooms", "bathrooms", "description", "views", "source", "region", "city", "town", "streetName", "digitalAddress", "locationDesc", "lat", "lon", "isDeleted", "createdAt", "updatedAt", "organizationId", "userId", "_all"],
    PropertyAvgAggregate: ["parkingCapacity", "seating", "bedrooms", "bathrooms", "views", "lat", "lon"],
    PropertySumAggregate: ["parkingCapacity", "seating", "bedrooms", "bathrooms", "views", "lat", "lon"],
    PropertyMinAggregate: ["id", "type", "acquisition", "state", "parkingCapacity", "seating", "bedrooms", "bathrooms", "description", "views", "source", "region", "city", "town", "streetName", "digitalAddress", "locationDesc", "lat", "lon", "isDeleted", "createdAt", "updatedAt", "organizationId", "userId"],
    PropertyMaxAggregate: ["id", "type", "acquisition", "state", "parkingCapacity", "seating", "bedrooms", "bathrooms", "description", "views", "source", "region", "city", "town", "streetName", "digitalAddress", "locationDesc", "lat", "lon", "isDeleted", "createdAt", "updatedAt", "organizationId", "userId"],
    Property_RequestCount: ["priceRange"],
    Property_RequestCountAggregate: ["id", "type", "acquisition", "state", "amenities", "parkingCapacity", "seating", "bedrooms", "bathrooms", "additionalInfo", "region", "city", "town", "createdAt", "updatedAt", "userId", "_all"],
    Property_RequestAvgAggregate: ["parkingCapacity", "seating", "bedrooms", "bathrooms"],
    Property_RequestSumAggregate: ["parkingCapacity", "seating", "bedrooms", "bathrooms"],
    Property_RequestMinAggregate: ["id", "type", "acquisition", "state", "parkingCapacity", "seating", "bedrooms", "bathrooms", "additionalInfo", "region", "city", "town", "createdAt", "updatedAt", "userId"],
    Property_RequestMaxAggregate: ["id", "type", "acquisition", "state", "parkingCapacity", "seating", "bedrooms", "bathrooms", "additionalInfo", "region", "city", "town", "createdAt", "updatedAt", "userId"],
    LocationCountAggregate: ["id", "region", "city", "locationInfo", "electricitySupplyRating", "waterSupplyRating", "noiseLevelSupplyRating", "crimeSupplpyRating", "recreationalRating", "trafficRating", "lat", "lon", "_all"],
    LocationAvgAggregate: ["electricitySupplyRating", "waterSupplyRating", "noiseLevelSupplyRating", "crimeSupplpyRating", "recreationalRating", "trafficRating", "lat", "lon"],
    LocationSumAggregate: ["electricitySupplyRating", "waterSupplyRating", "noiseLevelSupplyRating", "crimeSupplpyRating", "recreationalRating", "trafficRating", "lat", "lon"],
    LocationMinAggregate: ["id", "region", "city", "locationInfo", "electricitySupplyRating", "waterSupplyRating", "noiseLevelSupplyRating", "crimeSupplpyRating", "recreationalRating", "trafficRating", "lat", "lon"],
    LocationMaxAggregate: ["id", "region", "city", "locationInfo", "electricitySupplyRating", "waterSupplyRating", "noiseLevelSupplyRating", "crimeSupplpyRating", "recreationalRating", "trafficRating", "lat", "lon"],
    AdvertisementCountAggregate: ["id", "isExpired", "isPaused", "createdAt", "updatedAt", "userId", "organizationId", "propertyId", "_all"],
    AdvertisementMinAggregate: ["id", "isExpired", "isPaused", "createdAt", "updatedAt", "userId", "organizationId", "propertyId"],
    AdvertisementMaxAggregate: ["id", "isExpired", "isPaused", "createdAt", "updatedAt", "userId", "organizationId", "propertyId"],
    PriceCountAggregate: ["id", "figure", "currency", "duration", "propertyId", "advertisementId", "property_RequestId", "_all"],
    PriceAvgAggregate: ["figure"],
    PriceSumAggregate: ["figure"],
    PriceMinAggregate: ["id", "figure", "currency", "duration", "propertyId", "advertisementId", "property_RequestId"],
    PriceMaxAggregate: ["id", "figure", "currency", "duration", "propertyId", "advertisementId", "property_RequestId"],
    LandSizeCountAggregate: ["id", "measurement", "unit", "propertyId", "property_RequestId", "_all"],
    LandSizeAvgAggregate: ["measurement"],
    LandSizeSumAggregate: ["measurement"],
    LandSizeMinAggregate: ["id", "measurement", "unit", "propertyId", "property_RequestId"],
    LandSizeMaxAggregate: ["id", "measurement", "unit", "propertyId", "property_RequestId"],
    SearchCountAggregate: ["id", "userId", "category", "type", "acquisition", "seating", "state", "bedrooms", "bathrooms", "parkingCapacity", "location", "createdAt", "_all"],
    SearchAvgAggregate: ["seating", "bedrooms", "bathrooms", "parkingCapacity"],
    SearchSumAggregate: ["seating", "bedrooms", "bathrooms", "parkingCapacity"],
    SearchMinAggregate: ["id", "userId", "category", "type", "acquisition", "seating", "state", "bedrooms", "bathrooms", "parkingCapacity", "location", "createdAt"],
    SearchMaxAggregate: ["id", "userId", "category", "type", "acquisition", "seating", "state", "bedrooms", "bathrooms", "parkingCapacity", "location", "createdAt"]
};
function applyOutputTypesEnhanceMap(outputTypesEnhanceMap) {
    for (const outputTypeEnhanceMapKey of Object.keys(outputTypesEnhanceMap)) {
        const outputTypeName = outputTypeEnhanceMapKey;
        const typeConfig = outputTypesEnhanceMap[outputTypeName];
        const typeClass = outputTypes[outputTypeName];
        const typeTarget = typeClass.prototype;
        applyTypeClassEnhanceConfig(typeConfig, typeClass, typeTarget, outputsInfo[outputTypeName]);
    }
}
exports.applyOutputTypesEnhanceMap = applyOutputTypesEnhanceMap;
const inputsInfo = {
    OrganizationWhereInput: ["AND", "OR", "NOT", "id", "title", "address", "members", "properties", "advertisement", "isVerified", "isRegistrated", "isDeleted", "createdAt", "updatedAt"],
    OrganizationOrderByWithRelationAndSearchRelevanceInput: ["id", "title", "address", "members", "properties", "advertisement", "isVerified", "isRegistrated", "isDeleted", "createdAt", "updatedAt", "_relevance"],
    OrganizationWhereUniqueInput: ["id", "title"],
    OrganizationOrderByWithAggregationInput: ["id", "title", "isVerified", "isRegistrated", "isDeleted", "createdAt", "updatedAt", "_count", "_max", "_min"],
    OrganizationScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "title", "isVerified", "isRegistrated", "isDeleted", "createdAt", "updatedAt"],
    UserWhereInput: ["AND", "OR", "NOT", "id", "firstName", "lastName", "middleName", "status", "address", "property", "saves", "advertisement", "request", "isVerified", "isRegistrated", "isDeleted", "createdAt", "updatedAt", "organization", "organizationId"],
    UserOrderByWithRelationAndSearchRelevanceInput: ["id", "firstName", "lastName", "middleName", "status", "address", "property", "saves", "advertisement", "request", "isVerified", "isRegistrated", "isDeleted", "createdAt", "updatedAt", "organization", "organizationId", "_relevance"],
    UserWhereUniqueInput: ["id"],
    UserOrderByWithAggregationInput: ["id", "firstName", "lastName", "middleName", "status", "isVerified", "isRegistrated", "isDeleted", "createdAt", "updatedAt", "organizationId", "_count", "_max", "_min"],
    UserScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "firstName", "lastName", "middleName", "status", "isVerified", "isRegistrated", "isDeleted", "createdAt", "updatedAt", "organizationId"],
    SaveWhereInput: ["AND", "OR", "NOT", "id", "createdAt", "User", "userId", "Property", "propertyId"],
    SaveOrderByWithRelationAndSearchRelevanceInput: ["id", "createdAt", "User", "userId", "Property", "propertyId", "_relevance"],
    SaveWhereUniqueInput: ["id"],
    SaveOrderByWithAggregationInput: ["id", "createdAt", "userId", "propertyId", "_count", "_max", "_min"],
    SaveScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "createdAt", "userId", "propertyId"],
    AddressWhereInput: ["AND", "OR", "NOT", "id", "email", "mobile", "work", "office", "createdAt", "updatedAt", "Organization", "organizationId", "User", "userId"],
    AddressOrderByWithRelationAndSearchRelevanceInput: ["id", "email", "mobile", "work", "office", "createdAt", "updatedAt", "Organization", "organizationId", "User", "userId", "_relevance"],
    AddressWhereUniqueInput: ["id", "email", "organizationId", "userId"],
    AddressOrderByWithAggregationInput: ["id", "email", "mobile", "work", "office", "createdAt", "updatedAt", "organizationId", "userId", "_count", "_max", "_min"],
    AddressScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "email", "mobile", "work", "office", "createdAt", "updatedAt", "organizationId", "userId"],
    PropertyWhereInput: ["AND", "OR", "NOT", "id", "type", "acquisition", "state", "size", "price", "images", "amenities", "parkingCapacity", "seating", "bedrooms", "bathrooms", "description", "views", "likes", "source", "region", "city", "town", "streetName", "digitalAddress", "locationDesc", "lat", "lon", "isDeleted", "createdAt", "updatedAt", "owner", "organization", "organizationId", "userId", "advertisement"],
    PropertyOrderByWithRelationAndSearchRelevanceInput: ["id", "type", "acquisition", "state", "size", "price", "images", "amenities", "parkingCapacity", "seating", "bedrooms", "bathrooms", "description", "views", "likes", "source", "region", "city", "town", "streetName", "digitalAddress", "locationDesc", "lat", "lon", "isDeleted", "createdAt", "updatedAt", "owner", "organization", "organizationId", "userId", "advertisement", "_relevance"],
    PropertyWhereUniqueInput: ["id"],
    PropertyOrderByWithAggregationInput: ["id", "type", "acquisition", "state", "images", "amenities", "parkingCapacity", "seating", "bedrooms", "bathrooms", "description", "views", "source", "region", "city", "town", "streetName", "digitalAddress", "locationDesc", "lat", "lon", "isDeleted", "createdAt", "updatedAt", "organizationId", "userId", "_count", "_avg", "_max", "_min", "_sum"],
    PropertyScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "type", "acquisition", "state", "images", "amenities", "parkingCapacity", "seating", "bedrooms", "bathrooms", "description", "views", "source", "region", "city", "town", "streetName", "digitalAddress", "locationDesc", "lat", "lon", "isDeleted", "createdAt", "updatedAt", "organizationId", "userId"],
    Property_RequestWhereInput: ["AND", "OR", "NOT", "id", "type", "acquisition", "state", "priceRange", "amenities", "size", "parkingCapacity", "seating", "bedrooms", "bathrooms", "additionalInfo", "region", "city", "town", "createdAt", "updatedAt", "user", "userId"],
    Property_RequestOrderByWithRelationAndSearchRelevanceInput: ["id", "type", "acquisition", "state", "priceRange", "amenities", "size", "parkingCapacity", "seating", "bedrooms", "bathrooms", "additionalInfo", "region", "city", "town", "createdAt", "updatedAt", "user", "userId", "_relevance"],
    Property_RequestWhereUniqueInput: ["id"],
    Property_RequestOrderByWithAggregationInput: ["id", "type", "acquisition", "state", "amenities", "parkingCapacity", "seating", "bedrooms", "bathrooms", "additionalInfo", "region", "city", "town", "createdAt", "updatedAt", "userId", "_count", "_avg", "_max", "_min", "_sum"],
    Property_RequestScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "type", "acquisition", "state", "amenities", "parkingCapacity", "seating", "bedrooms", "bathrooms", "additionalInfo", "region", "city", "town", "createdAt", "updatedAt", "userId"],
    LocationWhereInput: ["AND", "OR", "NOT", "id", "region", "city", "locationInfo", "electricitySupplyRating", "waterSupplyRating", "noiseLevelSupplyRating", "crimeSupplpyRating", "recreationalRating", "trafficRating", "lat", "lon"],
    LocationOrderByWithRelationAndSearchRelevanceInput: ["id", "region", "city", "locationInfo", "electricitySupplyRating", "waterSupplyRating", "noiseLevelSupplyRating", "crimeSupplpyRating", "recreationalRating", "trafficRating", "lat", "lon", "_relevance"],
    LocationWhereUniqueInput: ["id", "region_city"],
    LocationOrderByWithAggregationInput: ["id", "region", "city", "locationInfo", "electricitySupplyRating", "waterSupplyRating", "noiseLevelSupplyRating", "crimeSupplpyRating", "recreationalRating", "trafficRating", "lat", "lon", "_count", "_avg", "_max", "_min", "_sum"],
    LocationScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "region", "city", "locationInfo", "electricitySupplyRating", "waterSupplyRating", "noiseLevelSupplyRating", "crimeSupplpyRating", "recreationalRating", "trafficRating", "lat", "lon"],
    AdvertisementWhereInput: ["AND", "OR", "NOT", "id", "price", "isExpired", "isPaused", "createdAt", "updatedAt", "user", "userId", "organization", "organizationId", "property", "propertyId"],
    AdvertisementOrderByWithRelationAndSearchRelevanceInput: ["id", "price", "isExpired", "isPaused", "createdAt", "updatedAt", "user", "userId", "organization", "organizationId", "property", "propertyId", "_relevance"],
    AdvertisementWhereUniqueInput: ["id"],
    AdvertisementOrderByWithAggregationInput: ["id", "isExpired", "isPaused", "createdAt", "updatedAt", "userId", "organizationId", "propertyId", "_count", "_max", "_min"],
    AdvertisementScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "isExpired", "isPaused", "createdAt", "updatedAt", "userId", "organizationId", "propertyId"],
    PriceWhereInput: ["AND", "OR", "NOT", "id", "figure", "currency", "duration", "Property", "propertyId", "advertisement", "advertisementId", "Property_Request", "property_RequestId"],
    PriceOrderByWithRelationAndSearchRelevanceInput: ["id", "figure", "currency", "duration", "Property", "propertyId", "advertisement", "advertisementId", "Property_Request", "property_RequestId", "_relevance"],
    PriceWhereUniqueInput: ["id", "propertyId", "advertisementId"],
    PriceOrderByWithAggregationInput: ["id", "figure", "currency", "duration", "propertyId", "advertisementId", "property_RequestId", "_count", "_avg", "_max", "_min", "_sum"],
    PriceScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "figure", "currency", "duration", "propertyId", "advertisementId", "property_RequestId"],
    LandSizeWhereInput: ["AND", "OR", "NOT", "id", "measurement", "unit", "Property", "propertyId", "Property_Request", "property_RequestId"],
    LandSizeOrderByWithRelationAndSearchRelevanceInput: ["id", "measurement", "unit", "Property", "propertyId", "Property_Request", "property_RequestId", "_relevance"],
    LandSizeWhereUniqueInput: ["id", "propertyId", "property_RequestId"],
    LandSizeOrderByWithAggregationInput: ["id", "measurement", "unit", "propertyId", "property_RequestId", "_count", "_avg", "_max", "_min", "_sum"],
    LandSizeScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "measurement", "unit", "propertyId", "property_RequestId"],
    SearchWhereInput: ["AND", "OR", "NOT", "id", "userId", "category", "type", "acquisition", "seating", "state", "bedrooms", "bathrooms", "parkingCapacity", "location", "createdAt"],
    SearchOrderByWithRelationAndSearchRelevanceInput: ["id", "userId", "category", "type", "acquisition", "seating", "state", "bedrooms", "bathrooms", "parkingCapacity", "location", "createdAt", "_relevance"],
    SearchWhereUniqueInput: ["id"],
    SearchOrderByWithAggregationInput: ["id", "userId", "category", "type", "acquisition", "seating", "state", "bedrooms", "bathrooms", "parkingCapacity", "location", "createdAt", "_count", "_avg", "_max", "_min", "_sum"],
    SearchScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "userId", "category", "type", "acquisition", "seating", "state", "bedrooms", "bathrooms", "parkingCapacity", "location", "createdAt"],
    OrganizationCreateInput: ["id", "title", "address", "members", "properties", "advertisement", "isVerified", "isRegistrated", "isDeleted", "createdAt", "updatedAt"],
    OrganizationUpdateInput: ["id", "title", "address", "members", "properties", "advertisement", "isVerified", "isRegistrated", "isDeleted", "createdAt", "updatedAt"],
    OrganizationCreateManyInput: ["id", "title", "isVerified", "isRegistrated", "isDeleted", "createdAt", "updatedAt"],
    OrganizationUpdateManyMutationInput: ["id", "title", "isVerified", "isRegistrated", "isDeleted", "createdAt", "updatedAt"],
    UserCreateInput: ["id", "firstName", "lastName", "middleName", "status", "address", "property", "saves", "advertisement", "request", "isVerified", "isRegistrated", "isDeleted", "createdAt", "updatedAt", "organization"],
    UserUpdateInput: ["id", "firstName", "lastName", "middleName", "status", "address", "property", "saves", "advertisement", "request", "isVerified", "isRegistrated", "isDeleted", "createdAt", "updatedAt", "organization"],
    UserCreateManyInput: ["id", "firstName", "lastName", "middleName", "status", "isVerified", "isRegistrated", "isDeleted", "createdAt", "updatedAt", "organizationId"],
    UserUpdateManyMutationInput: ["id", "firstName", "lastName", "middleName", "status", "isVerified", "isRegistrated", "isDeleted", "createdAt", "updatedAt"],
    SaveCreateInput: ["id", "createdAt", "User", "Property"],
    SaveUpdateInput: ["id", "createdAt", "User", "Property"],
    SaveCreateManyInput: ["id", "createdAt", "userId", "propertyId"],
    SaveUpdateManyMutationInput: ["id", "createdAt"],
    AddressCreateInput: ["id", "email", "mobile", "work", "office", "createdAt", "updatedAt", "Organization", "User"],
    AddressUpdateInput: ["id", "email", "mobile", "work", "office", "createdAt", "updatedAt", "Organization", "User"],
    AddressCreateManyInput: ["id", "email", "mobile", "work", "office", "createdAt", "updatedAt", "organizationId", "userId"],
    AddressUpdateManyMutationInput: ["id", "email", "mobile", "work", "office", "createdAt", "updatedAt"],
    PropertyCreateInput: ["id", "type", "acquisition", "state", "size", "price", "images", "amenities", "parkingCapacity", "seating", "bedrooms", "bathrooms", "description", "views", "likes", "source", "region", "city", "town", "streetName", "digitalAddress", "locationDesc", "lat", "lon", "isDeleted", "createdAt", "updatedAt", "owner", "organization", "advertisement"],
    PropertyUpdateInput: ["id", "type", "acquisition", "state", "size", "price", "images", "amenities", "parkingCapacity", "seating", "bedrooms", "bathrooms", "description", "views", "likes", "source", "region", "city", "town", "streetName", "digitalAddress", "locationDesc", "lat", "lon", "isDeleted", "createdAt", "updatedAt", "owner", "organization", "advertisement"],
    PropertyCreateManyInput: ["id", "type", "acquisition", "state", "images", "amenities", "parkingCapacity", "seating", "bedrooms", "bathrooms", "description", "views", "source", "region", "city", "town", "streetName", "digitalAddress", "locationDesc", "lat", "lon", "isDeleted", "createdAt", "updatedAt", "organizationId", "userId"],
    PropertyUpdateManyMutationInput: ["id", "type", "acquisition", "state", "images", "amenities", "parkingCapacity", "seating", "bedrooms", "bathrooms", "description", "views", "source", "region", "city", "town", "streetName", "digitalAddress", "locationDesc", "lat", "lon", "isDeleted", "createdAt", "updatedAt"],
    Property_RequestCreateInput: ["id", "type", "acquisition", "state", "priceRange", "amenities", "size", "parkingCapacity", "seating", "bedrooms", "bathrooms", "additionalInfo", "region", "city", "town", "createdAt", "updatedAt", "user"],
    Property_RequestUpdateInput: ["id", "type", "acquisition", "state", "priceRange", "amenities", "size", "parkingCapacity", "seating", "bedrooms", "bathrooms", "additionalInfo", "region", "city", "town", "createdAt", "updatedAt", "user"],
    Property_RequestCreateManyInput: ["id", "type", "acquisition", "state", "amenities", "parkingCapacity", "seating", "bedrooms", "bathrooms", "additionalInfo", "region", "city", "town", "createdAt", "updatedAt", "userId"],
    Property_RequestUpdateManyMutationInput: ["id", "type", "acquisition", "state", "amenities", "parkingCapacity", "seating", "bedrooms", "bathrooms", "additionalInfo", "region", "city", "town", "createdAt", "updatedAt"],
    LocationCreateInput: ["id", "region", "city", "locationInfo", "electricitySupplyRating", "waterSupplyRating", "noiseLevelSupplyRating", "crimeSupplpyRating", "recreationalRating", "trafficRating", "lat", "lon"],
    LocationUpdateInput: ["id", "region", "city", "locationInfo", "electricitySupplyRating", "waterSupplyRating", "noiseLevelSupplyRating", "crimeSupplpyRating", "recreationalRating", "trafficRating", "lat", "lon"],
    LocationCreateManyInput: ["id", "region", "city", "locationInfo", "electricitySupplyRating", "waterSupplyRating", "noiseLevelSupplyRating", "crimeSupplpyRating", "recreationalRating", "trafficRating", "lat", "lon"],
    LocationUpdateManyMutationInput: ["id", "region", "city", "locationInfo", "electricitySupplyRating", "waterSupplyRating", "noiseLevelSupplyRating", "crimeSupplpyRating", "recreationalRating", "trafficRating", "lat", "lon"],
    AdvertisementCreateInput: ["id", "price", "isExpired", "isPaused", "createdAt", "updatedAt", "user", "organization", "property"],
    AdvertisementUpdateInput: ["id", "price", "isExpired", "isPaused", "createdAt", "updatedAt", "user", "organization", "property"],
    AdvertisementCreateManyInput: ["id", "isExpired", "isPaused", "createdAt", "updatedAt", "userId", "organizationId", "propertyId"],
    AdvertisementUpdateManyMutationInput: ["id", "isExpired", "isPaused", "createdAt", "updatedAt"],
    PriceCreateInput: ["id", "figure", "currency", "duration", "Property", "advertisement", "Property_Request"],
    PriceUpdateInput: ["id", "figure", "currency", "duration", "Property", "advertisement", "Property_Request"],
    PriceCreateManyInput: ["id", "figure", "currency", "duration", "propertyId", "advertisementId", "property_RequestId"],
    PriceUpdateManyMutationInput: ["id", "figure", "currency", "duration"],
    LandSizeCreateInput: ["id", "measurement", "unit", "Property", "Property_Request"],
    LandSizeUpdateInput: ["id", "measurement", "unit", "Property", "Property_Request"],
    LandSizeCreateManyInput: ["id", "measurement", "unit", "propertyId", "property_RequestId"],
    LandSizeUpdateManyMutationInput: ["id", "measurement", "unit"],
    SearchCreateInput: ["id", "userId", "category", "type", "acquisition", "seating", "state", "bedrooms", "bathrooms", "parkingCapacity", "location", "createdAt"],
    SearchUpdateInput: ["id", "userId", "category", "type", "acquisition", "seating", "state", "bedrooms", "bathrooms", "parkingCapacity", "location", "createdAt"],
    SearchCreateManyInput: ["id", "userId", "category", "type", "acquisition", "seating", "state", "bedrooms", "bathrooms", "parkingCapacity", "location", "createdAt"],
    SearchUpdateManyMutationInput: ["id", "userId", "category", "type", "acquisition", "seating", "state", "bedrooms", "bathrooms", "parkingCapacity", "location", "createdAt"],
    StringFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "search", "mode", "not"],
    AddressRelationFilter: ["is", "isNot"],
    UserListRelationFilter: ["every", "some", "none"],
    PropertyListRelationFilter: ["every", "some", "none"],
    AdvertisementListRelationFilter: ["every", "some", "none"],
    BoolFilter: ["equals", "not"],
    DateTimeFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    UserOrderByRelationAggregateInput: ["_count"],
    PropertyOrderByRelationAggregateInput: ["_count"],
    AdvertisementOrderByRelationAggregateInput: ["_count"],
    OrganizationOrderByRelevanceInput: ["fields", "sort", "search"],
    OrganizationCountOrderByAggregateInput: ["id", "title", "isVerified", "isRegistrated", "isDeleted", "createdAt", "updatedAt"],
    OrganizationMaxOrderByAggregateInput: ["id", "title", "isVerified", "isRegistrated", "isDeleted", "createdAt", "updatedAt"],
    OrganizationMinOrderByAggregateInput: ["id", "title", "isVerified", "isRegistrated", "isDeleted", "createdAt", "updatedAt"],
    StringWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "search", "mode", "not", "_count", "_min", "_max"],
    BoolWithAggregatesFilter: ["equals", "not", "_count", "_min", "_max"],
    DateTimeWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_min", "_max"],
    StringNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "search", "mode", "not"],
    EnumUserStatusFilter: ["equals", "in", "notIn", "not"],
    SaveListRelationFilter: ["every", "some", "none"],
    Property_RequestListRelationFilter: ["every", "some", "none"],
    OrganizationRelationFilter: ["is", "isNot"],
    SaveOrderByRelationAggregateInput: ["_count"],
    Property_RequestOrderByRelationAggregateInput: ["_count"],
    UserOrderByRelevanceInput: ["fields", "sort", "search"],
    UserCountOrderByAggregateInput: ["id", "firstName", "lastName", "middleName", "status", "isVerified", "isRegistrated", "isDeleted", "createdAt", "updatedAt", "organizationId"],
    UserMaxOrderByAggregateInput: ["id", "firstName", "lastName", "middleName", "status", "isVerified", "isRegistrated", "isDeleted", "createdAt", "updatedAt", "organizationId"],
    UserMinOrderByAggregateInput: ["id", "firstName", "lastName", "middleName", "status", "isVerified", "isRegistrated", "isDeleted", "createdAt", "updatedAt", "organizationId"],
    StringNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "search", "mode", "not", "_count", "_min", "_max"],
    EnumUserStatusWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    UserRelationFilter: ["is", "isNot"],
    PropertyRelationFilter: ["is", "isNot"],
    SaveOrderByRelevanceInput: ["fields", "sort", "search"],
    SaveCountOrderByAggregateInput: ["id", "createdAt", "userId", "propertyId"],
    SaveMaxOrderByAggregateInput: ["id", "createdAt", "userId", "propertyId"],
    SaveMinOrderByAggregateInput: ["id", "createdAt", "userId", "propertyId"],
    AddressOrderByRelevanceInput: ["fields", "sort", "search"],
    AddressCountOrderByAggregateInput: ["id", "email", "mobile", "work", "office", "createdAt", "updatedAt", "organizationId", "userId"],
    AddressMaxOrderByAggregateInput: ["id", "email", "mobile", "work", "office", "createdAt", "updatedAt", "organizationId", "userId"],
    AddressMinOrderByAggregateInput: ["id", "email", "mobile", "work", "office", "createdAt", "updatedAt", "organizationId", "userId"],
    EnumPropertyTypeFilter: ["equals", "in", "notIn", "not"],
    EnumAcquisitionTypeFilter: ["equals", "in", "notIn", "not"],
    EnumPropertyStateNullableFilter: ["equals", "in", "notIn", "not"],
    LandSizeRelationFilter: ["is", "isNot"],
    PriceRelationFilter: ["is", "isNot"],
    StringNullableListFilter: ["equals", "has", "hasEvery", "hasSome", "isEmpty"],
    IntNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    IntFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    FloatNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    PropertyOrderByRelevanceInput: ["fields", "sort", "search"],
    PropertyCountOrderByAggregateInput: ["id", "type", "acquisition", "state", "images", "amenities", "parkingCapacity", "seating", "bedrooms", "bathrooms", "description", "views", "source", "region", "city", "town", "streetName", "digitalAddress", "locationDesc", "lat", "lon", "isDeleted", "createdAt", "updatedAt", "organizationId", "userId"],
    PropertyAvgOrderByAggregateInput: ["parkingCapacity", "seating", "bedrooms", "bathrooms", "views", "lat", "lon"],
    PropertyMaxOrderByAggregateInput: ["id", "type", "acquisition", "state", "parkingCapacity", "seating", "bedrooms", "bathrooms", "description", "views", "source", "region", "city", "town", "streetName", "digitalAddress", "locationDesc", "lat", "lon", "isDeleted", "createdAt", "updatedAt", "organizationId", "userId"],
    PropertyMinOrderByAggregateInput: ["id", "type", "acquisition", "state", "parkingCapacity", "seating", "bedrooms", "bathrooms", "description", "views", "source", "region", "city", "town", "streetName", "digitalAddress", "locationDesc", "lat", "lon", "isDeleted", "createdAt", "updatedAt", "organizationId", "userId"],
    PropertySumOrderByAggregateInput: ["parkingCapacity", "seating", "bedrooms", "bathrooms", "views", "lat", "lon"],
    EnumPropertyTypeWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    EnumAcquisitionTypeWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    EnumPropertyStateNullableWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    IntNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_avg", "_sum", "_min", "_max"],
    IntWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_avg", "_sum", "_min", "_max"],
    FloatNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_avg", "_sum", "_min", "_max"],
    PriceListRelationFilter: ["every", "some", "none"],
    PriceOrderByRelationAggregateInput: ["_count"],
    Property_RequestOrderByRelevanceInput: ["fields", "sort", "search"],
    Property_RequestCountOrderByAggregateInput: ["id", "type", "acquisition", "state", "amenities", "parkingCapacity", "seating", "bedrooms", "bathrooms", "additionalInfo", "region", "city", "town", "createdAt", "updatedAt", "userId"],
    Property_RequestAvgOrderByAggregateInput: ["parkingCapacity", "seating", "bedrooms", "bathrooms"],
    Property_RequestMaxOrderByAggregateInput: ["id", "type", "acquisition", "state", "parkingCapacity", "seating", "bedrooms", "bathrooms", "additionalInfo", "region", "city", "town", "createdAt", "updatedAt", "userId"],
    Property_RequestMinOrderByAggregateInput: ["id", "type", "acquisition", "state", "parkingCapacity", "seating", "bedrooms", "bathrooms", "additionalInfo", "region", "city", "town", "createdAt", "updatedAt", "userId"],
    Property_RequestSumOrderByAggregateInput: ["parkingCapacity", "seating", "bedrooms", "bathrooms"],
    LocationOrderByRelevanceInput: ["fields", "sort", "search"],
    LocationRegionCityCompoundUniqueInput: ["region", "city"],
    LocationCountOrderByAggregateInput: ["id", "region", "city", "locationInfo", "electricitySupplyRating", "waterSupplyRating", "noiseLevelSupplyRating", "crimeSupplpyRating", "recreationalRating", "trafficRating", "lat", "lon"],
    LocationAvgOrderByAggregateInput: ["electricitySupplyRating", "waterSupplyRating", "noiseLevelSupplyRating", "crimeSupplpyRating", "recreationalRating", "trafficRating", "lat", "lon"],
    LocationMaxOrderByAggregateInput: ["id", "region", "city", "locationInfo", "electricitySupplyRating", "waterSupplyRating", "noiseLevelSupplyRating", "crimeSupplpyRating", "recreationalRating", "trafficRating", "lat", "lon"],
    LocationMinOrderByAggregateInput: ["id", "region", "city", "locationInfo", "electricitySupplyRating", "waterSupplyRating", "noiseLevelSupplyRating", "crimeSupplpyRating", "recreationalRating", "trafficRating", "lat", "lon"],
    LocationSumOrderByAggregateInput: ["electricitySupplyRating", "waterSupplyRating", "noiseLevelSupplyRating", "crimeSupplpyRating", "recreationalRating", "trafficRating", "lat", "lon"],
    AdvertisementOrderByRelevanceInput: ["fields", "sort", "search"],
    AdvertisementCountOrderByAggregateInput: ["id", "isExpired", "isPaused", "createdAt", "updatedAt", "userId", "organizationId", "propertyId"],
    AdvertisementMaxOrderByAggregateInput: ["id", "isExpired", "isPaused", "createdAt", "updatedAt", "userId", "organizationId", "propertyId"],
    AdvertisementMinOrderByAggregateInput: ["id", "isExpired", "isPaused", "createdAt", "updatedAt", "userId", "organizationId", "propertyId"],
    FloatFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    EnumCurrencyFilter: ["equals", "in", "notIn", "not"],
    EnumDurationNullableFilter: ["equals", "in", "notIn", "not"],
    AdvertisementRelationFilter: ["is", "isNot"],
    Property_RequestRelationFilter: ["is", "isNot"],
    PriceOrderByRelevanceInput: ["fields", "sort", "search"],
    PriceCountOrderByAggregateInput: ["id", "figure", "currency", "duration", "propertyId", "advertisementId", "property_RequestId"],
    PriceAvgOrderByAggregateInput: ["figure"],
    PriceMaxOrderByAggregateInput: ["id", "figure", "currency", "duration", "propertyId", "advertisementId", "property_RequestId"],
    PriceMinOrderByAggregateInput: ["id", "figure", "currency", "duration", "propertyId", "advertisementId", "property_RequestId"],
    PriceSumOrderByAggregateInput: ["figure"],
    FloatWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_avg", "_sum", "_min", "_max"],
    EnumCurrencyWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    EnumDurationNullableWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    EnumLandSizeUnitFilter: ["equals", "in", "notIn", "not"],
    LandSizeOrderByRelevanceInput: ["fields", "sort", "search"],
    LandSizeCountOrderByAggregateInput: ["id", "measurement", "unit", "propertyId", "property_RequestId"],
    LandSizeAvgOrderByAggregateInput: ["measurement"],
    LandSizeMaxOrderByAggregateInput: ["id", "measurement", "unit", "propertyId", "property_RequestId"],
    LandSizeMinOrderByAggregateInput: ["id", "measurement", "unit", "propertyId", "property_RequestId"],
    LandSizeSumOrderByAggregateInput: ["measurement"],
    EnumLandSizeUnitWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    EnumPropertyCategoryFilter: ["equals", "in", "notIn", "not"],
    EnumPropertyTypeNullableFilter: ["equals", "in", "notIn", "not"],
    EnumAcquisitionTypeNullableFilter: ["equals", "in", "notIn", "not"],
    SearchOrderByRelevanceInput: ["fields", "sort", "search"],
    SearchCountOrderByAggregateInput: ["id", "userId", "category", "type", "acquisition", "seating", "state", "bedrooms", "bathrooms", "parkingCapacity", "location", "createdAt"],
    SearchAvgOrderByAggregateInput: ["seating", "bedrooms", "bathrooms", "parkingCapacity"],
    SearchMaxOrderByAggregateInput: ["id", "userId", "category", "type", "acquisition", "seating", "state", "bedrooms", "bathrooms", "parkingCapacity", "location", "createdAt"],
    SearchMinOrderByAggregateInput: ["id", "userId", "category", "type", "acquisition", "seating", "state", "bedrooms", "bathrooms", "parkingCapacity", "location", "createdAt"],
    SearchSumOrderByAggregateInput: ["seating", "bedrooms", "bathrooms", "parkingCapacity"],
    EnumPropertyCategoryWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    EnumPropertyTypeNullableWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    EnumAcquisitionTypeNullableWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    AddressCreateNestedOneWithoutOrganizationInput: ["create", "connectOrCreate", "connect"],
    UserCreateNestedManyWithoutOrganizationInput: ["create", "connectOrCreate", "createMany", "connect"],
    PropertyCreateNestedManyWithoutOrganizationInput: ["create", "connectOrCreate", "createMany", "connect"],
    AdvertisementCreateNestedManyWithoutOrganizationInput: ["create", "connectOrCreate", "createMany", "connect"],
    StringFieldUpdateOperationsInput: ["set"],
    AddressUpdateOneWithoutOrganizationInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    UserUpdateManyWithoutOrganizationInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    PropertyUpdateManyWithoutOrganizationInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    AdvertisementUpdateManyWithoutOrganizationInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    BoolFieldUpdateOperationsInput: ["set"],
    DateTimeFieldUpdateOperationsInput: ["set"],
    AddressCreateNestedOneWithoutUserInput: ["create", "connectOrCreate", "connect"],
    PropertyCreateNestedManyWithoutOwnerInput: ["create", "connectOrCreate", "createMany", "connect"],
    SaveCreateNestedManyWithoutUserInput: ["create", "connectOrCreate", "createMany", "connect"],
    AdvertisementCreateNestedManyWithoutUserInput: ["create", "connectOrCreate", "createMany", "connect"],
    Property_RequestCreateNestedManyWithoutUserInput: ["create", "connectOrCreate", "createMany", "connect"],
    OrganizationCreateNestedOneWithoutMembersInput: ["create", "connectOrCreate", "connect"],
    NullableStringFieldUpdateOperationsInput: ["set"],
    EnumUserStatusFieldUpdateOperationsInput: ["set"],
    AddressUpdateOneWithoutUserInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    PropertyUpdateManyWithoutOwnerInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    SaveUpdateManyWithoutUserInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    AdvertisementUpdateManyWithoutUserInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    Property_RequestUpdateManyWithoutUserInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    OrganizationUpdateOneWithoutMembersInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    UserCreateNestedOneWithoutSavesInput: ["create", "connectOrCreate", "connect"],
    PropertyCreateNestedOneWithoutLikesInput: ["create", "connectOrCreate", "connect"],
    UserUpdateOneWithoutSavesInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    PropertyUpdateOneWithoutLikesInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    OrganizationCreateNestedOneWithoutAddressInput: ["create", "connectOrCreate", "connect"],
    UserCreateNestedOneWithoutAddressInput: ["create", "connectOrCreate", "connect"],
    OrganizationUpdateOneWithoutAddressInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    UserUpdateOneWithoutAddressInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    LandSizeCreateNestedOneWithoutPropertyInput: ["create", "connectOrCreate", "connect"],
    PriceCreateNestedOneWithoutPropertyInput: ["create", "connectOrCreate", "connect"],
    PropertyCreateimagesInput: ["set"],
    PropertyCreateamenitiesInput: ["set"],
    SaveCreateNestedManyWithoutPropertyInput: ["create", "connectOrCreate", "createMany", "connect"],
    UserCreateNestedOneWithoutPropertyInput: ["create", "connectOrCreate", "connect"],
    OrganizationCreateNestedOneWithoutPropertiesInput: ["create", "connectOrCreate", "connect"],
    AdvertisementCreateNestedManyWithoutPropertyInput: ["create", "connectOrCreate", "createMany", "connect"],
    EnumPropertyTypeFieldUpdateOperationsInput: ["set"],
    EnumAcquisitionTypeFieldUpdateOperationsInput: ["set"],
    NullableEnumPropertyStateFieldUpdateOperationsInput: ["set"],
    LandSizeUpdateOneWithoutPropertyInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    PriceUpdateOneWithoutPropertyInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    PropertyUpdateimagesInput: ["set", "push"],
    PropertyUpdateamenitiesInput: ["set", "push"],
    NullableIntFieldUpdateOperationsInput: ["set", "increment", "decrement", "multiply", "divide"],
    IntFieldUpdateOperationsInput: ["set", "increment", "decrement", "multiply", "divide"],
    SaveUpdateManyWithoutPropertyInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    NullableFloatFieldUpdateOperationsInput: ["set", "increment", "decrement", "multiply", "divide"],
    UserUpdateOneWithoutPropertyInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    OrganizationUpdateOneWithoutPropertiesInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    AdvertisementUpdateManyWithoutPropertyInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    PriceCreateNestedManyWithoutProperty_RequestInput: ["create", "connectOrCreate", "createMany", "connect"],
    Property_RequestCreateamenitiesInput: ["set"],
    LandSizeCreateNestedOneWithoutProperty_RequestInput: ["create", "connectOrCreate", "connect"],
    UserCreateNestedOneWithoutRequestInput: ["create", "connectOrCreate", "connect"],
    PriceUpdateManyWithoutProperty_RequestInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    Property_RequestUpdateamenitiesInput: ["set", "push"],
    LandSizeUpdateOneWithoutProperty_RequestInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    UserUpdateOneWithoutRequestInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    PriceCreateNestedOneWithoutAdvertisementInput: ["create", "connectOrCreate", "connect"],
    UserCreateNestedOneWithoutAdvertisementInput: ["create", "connectOrCreate", "connect"],
    OrganizationCreateNestedOneWithoutAdvertisementInput: ["create", "connectOrCreate", "connect"],
    PropertyCreateNestedOneWithoutAdvertisementInput: ["create", "connectOrCreate", "connect"],
    PriceUpdateOneWithoutAdvertisementInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    UserUpdateOneWithoutAdvertisementInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    OrganizationUpdateOneWithoutAdvertisementInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    PropertyUpdateOneWithoutAdvertisementInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    PropertyCreateNestedOneWithoutPriceInput: ["create", "connectOrCreate", "connect"],
    AdvertisementCreateNestedOneWithoutPriceInput: ["create", "connectOrCreate", "connect"],
    Property_RequestCreateNestedOneWithoutPriceRangeInput: ["create", "connectOrCreate", "connect"],
    FloatFieldUpdateOperationsInput: ["set", "increment", "decrement", "multiply", "divide"],
    EnumCurrencyFieldUpdateOperationsInput: ["set"],
    NullableEnumDurationFieldUpdateOperationsInput: ["set"],
    PropertyUpdateOneWithoutPriceInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    AdvertisementUpdateOneWithoutPriceInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    Property_RequestUpdateOneWithoutPriceRangeInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    PropertyCreateNestedOneWithoutSizeInput: ["create", "connectOrCreate", "connect"],
    Property_RequestCreateNestedOneWithoutSizeInput: ["create", "connectOrCreate", "connect"],
    EnumLandSizeUnitFieldUpdateOperationsInput: ["set"],
    PropertyUpdateOneWithoutSizeInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    Property_RequestUpdateOneWithoutSizeInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    EnumPropertyCategoryFieldUpdateOperationsInput: ["set"],
    NullableEnumPropertyTypeFieldUpdateOperationsInput: ["set"],
    NullableEnumAcquisitionTypeFieldUpdateOperationsInput: ["set"],
    NestedStringFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "search", "not"],
    NestedBoolFilter: ["equals", "not"],
    NestedDateTimeFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    NestedStringWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "search", "not", "_count", "_min", "_max"],
    NestedIntFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    NestedBoolWithAggregatesFilter: ["equals", "not", "_count", "_min", "_max"],
    NestedDateTimeWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_min", "_max"],
    NestedStringNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "search", "not"],
    NestedEnumUserStatusFilter: ["equals", "in", "notIn", "not"],
    NestedStringNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "search", "not", "_count", "_min", "_max"],
    NestedIntNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    NestedEnumUserStatusWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    NestedEnumPropertyTypeFilter: ["equals", "in", "notIn", "not"],
    NestedEnumAcquisitionTypeFilter: ["equals", "in", "notIn", "not"],
    NestedEnumPropertyStateNullableFilter: ["equals", "in", "notIn", "not"],
    NestedFloatNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    NestedEnumPropertyTypeWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    NestedEnumAcquisitionTypeWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    NestedEnumPropertyStateNullableWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    NestedIntNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_avg", "_sum", "_min", "_max"],
    NestedIntWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_avg", "_sum", "_min", "_max"],
    NestedFloatFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    NestedFloatNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_avg", "_sum", "_min", "_max"],
    NestedEnumCurrencyFilter: ["equals", "in", "notIn", "not"],
    NestedEnumDurationNullableFilter: ["equals", "in", "notIn", "not"],
    NestedFloatWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_avg", "_sum", "_min", "_max"],
    NestedEnumCurrencyWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    NestedEnumDurationNullableWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    NestedEnumLandSizeUnitFilter: ["equals", "in", "notIn", "not"],
    NestedEnumLandSizeUnitWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    NestedEnumPropertyCategoryFilter: ["equals", "in", "notIn", "not"],
    NestedEnumPropertyTypeNullableFilter: ["equals", "in", "notIn", "not"],
    NestedEnumAcquisitionTypeNullableFilter: ["equals", "in", "notIn", "not"],
    NestedEnumPropertyCategoryWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    NestedEnumPropertyTypeNullableWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    NestedEnumAcquisitionTypeNullableWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    AddressCreateWithoutOrganizationInput: ["id", "email", "mobile", "work", "office", "createdAt", "updatedAt", "User"],
    AddressCreateOrConnectWithoutOrganizationInput: ["where", "create"],
    UserCreateWithoutOrganizationInput: ["id", "firstName", "lastName", "middleName", "status", "address", "property", "saves", "advertisement", "request", "isVerified", "isRegistrated", "isDeleted", "createdAt", "updatedAt"],
    UserCreateOrConnectWithoutOrganizationInput: ["where", "create"],
    UserCreateManyOrganizationInputEnvelope: ["data", "skipDuplicates"],
    PropertyCreateWithoutOrganizationInput: ["id", "type", "acquisition", "state", "size", "price", "images", "amenities", "parkingCapacity", "seating", "bedrooms", "bathrooms", "description", "views", "likes", "source", "region", "city", "town", "streetName", "digitalAddress", "locationDesc", "lat", "lon", "isDeleted", "createdAt", "updatedAt", "owner", "advertisement"],
    PropertyCreateOrConnectWithoutOrganizationInput: ["where", "create"],
    PropertyCreateManyOrganizationInputEnvelope: ["data", "skipDuplicates"],
    AdvertisementCreateWithoutOrganizationInput: ["id", "price", "isExpired", "isPaused", "createdAt", "updatedAt", "user", "property"],
    AdvertisementCreateOrConnectWithoutOrganizationInput: ["where", "create"],
    AdvertisementCreateManyOrganizationInputEnvelope: ["data", "skipDuplicates"],
    AddressUpsertWithoutOrganizationInput: ["update", "create"],
    AddressUpdateWithoutOrganizationInput: ["id", "email", "mobile", "work", "office", "createdAt", "updatedAt", "User"],
    UserUpsertWithWhereUniqueWithoutOrganizationInput: ["where", "update", "create"],
    UserUpdateWithWhereUniqueWithoutOrganizationInput: ["where", "data"],
    UserUpdateManyWithWhereWithoutOrganizationInput: ["where", "data"],
    UserScalarWhereInput: ["AND", "OR", "NOT", "id", "firstName", "lastName", "middleName", "status", "isVerified", "isRegistrated", "isDeleted", "createdAt", "updatedAt", "organizationId"],
    PropertyUpsertWithWhereUniqueWithoutOrganizationInput: ["where", "update", "create"],
    PropertyUpdateWithWhereUniqueWithoutOrganizationInput: ["where", "data"],
    PropertyUpdateManyWithWhereWithoutOrganizationInput: ["where", "data"],
    PropertyScalarWhereInput: ["AND", "OR", "NOT", "id", "type", "acquisition", "state", "images", "amenities", "parkingCapacity", "seating", "bedrooms", "bathrooms", "description", "views", "source", "region", "city", "town", "streetName", "digitalAddress", "locationDesc", "lat", "lon", "isDeleted", "createdAt", "updatedAt", "organizationId", "userId"],
    AdvertisementUpsertWithWhereUniqueWithoutOrganizationInput: ["where", "update", "create"],
    AdvertisementUpdateWithWhereUniqueWithoutOrganizationInput: ["where", "data"],
    AdvertisementUpdateManyWithWhereWithoutOrganizationInput: ["where", "data"],
    AdvertisementScalarWhereInput: ["AND", "OR", "NOT", "id", "isExpired", "isPaused", "createdAt", "updatedAt", "userId", "organizationId", "propertyId"],
    AddressCreateWithoutUserInput: ["id", "email", "mobile", "work", "office", "createdAt", "updatedAt", "Organization"],
    AddressCreateOrConnectWithoutUserInput: ["where", "create"],
    PropertyCreateWithoutOwnerInput: ["id", "type", "acquisition", "state", "size", "price", "images", "amenities", "parkingCapacity", "seating", "bedrooms", "bathrooms", "description", "views", "likes", "source", "region", "city", "town", "streetName", "digitalAddress", "locationDesc", "lat", "lon", "isDeleted", "createdAt", "updatedAt", "organization", "advertisement"],
    PropertyCreateOrConnectWithoutOwnerInput: ["where", "create"],
    PropertyCreateManyOwnerInputEnvelope: ["data", "skipDuplicates"],
    SaveCreateWithoutUserInput: ["id", "createdAt", "Property"],
    SaveCreateOrConnectWithoutUserInput: ["where", "create"],
    SaveCreateManyUserInputEnvelope: ["data", "skipDuplicates"],
    AdvertisementCreateWithoutUserInput: ["id", "price", "isExpired", "isPaused", "createdAt", "updatedAt", "organization", "property"],
    AdvertisementCreateOrConnectWithoutUserInput: ["where", "create"],
    AdvertisementCreateManyUserInputEnvelope: ["data", "skipDuplicates"],
    Property_RequestCreateWithoutUserInput: ["id", "type", "acquisition", "state", "priceRange", "amenities", "size", "parkingCapacity", "seating", "bedrooms", "bathrooms", "additionalInfo", "region", "city", "town", "createdAt", "updatedAt"],
    Property_RequestCreateOrConnectWithoutUserInput: ["where", "create"],
    Property_RequestCreateManyUserInputEnvelope: ["data", "skipDuplicates"],
    OrganizationCreateWithoutMembersInput: ["id", "title", "address", "properties", "advertisement", "isVerified", "isRegistrated", "isDeleted", "createdAt", "updatedAt"],
    OrganizationCreateOrConnectWithoutMembersInput: ["where", "create"],
    AddressUpsertWithoutUserInput: ["update", "create"],
    AddressUpdateWithoutUserInput: ["id", "email", "mobile", "work", "office", "createdAt", "updatedAt", "Organization"],
    PropertyUpsertWithWhereUniqueWithoutOwnerInput: ["where", "update", "create"],
    PropertyUpdateWithWhereUniqueWithoutOwnerInput: ["where", "data"],
    PropertyUpdateManyWithWhereWithoutOwnerInput: ["where", "data"],
    SaveUpsertWithWhereUniqueWithoutUserInput: ["where", "update", "create"],
    SaveUpdateWithWhereUniqueWithoutUserInput: ["where", "data"],
    SaveUpdateManyWithWhereWithoutUserInput: ["where", "data"],
    SaveScalarWhereInput: ["AND", "OR", "NOT", "id", "createdAt", "userId", "propertyId"],
    AdvertisementUpsertWithWhereUniqueWithoutUserInput: ["where", "update", "create"],
    AdvertisementUpdateWithWhereUniqueWithoutUserInput: ["where", "data"],
    AdvertisementUpdateManyWithWhereWithoutUserInput: ["where", "data"],
    Property_RequestUpsertWithWhereUniqueWithoutUserInput: ["where", "update", "create"],
    Property_RequestUpdateWithWhereUniqueWithoutUserInput: ["where", "data"],
    Property_RequestUpdateManyWithWhereWithoutUserInput: ["where", "data"],
    Property_RequestScalarWhereInput: ["AND", "OR", "NOT", "id", "type", "acquisition", "state", "amenities", "parkingCapacity", "seating", "bedrooms", "bathrooms", "additionalInfo", "region", "city", "town", "createdAt", "updatedAt", "userId"],
    OrganizationUpsertWithoutMembersInput: ["update", "create"],
    OrganizationUpdateWithoutMembersInput: ["id", "title", "address", "properties", "advertisement", "isVerified", "isRegistrated", "isDeleted", "createdAt", "updatedAt"],
    UserCreateWithoutSavesInput: ["id", "firstName", "lastName", "middleName", "status", "address", "property", "advertisement", "request", "isVerified", "isRegistrated", "isDeleted", "createdAt", "updatedAt", "organization"],
    UserCreateOrConnectWithoutSavesInput: ["where", "create"],
    PropertyCreateWithoutLikesInput: ["id", "type", "acquisition", "state", "size", "price", "images", "amenities", "parkingCapacity", "seating", "bedrooms", "bathrooms", "description", "views", "source", "region", "city", "town", "streetName", "digitalAddress", "locationDesc", "lat", "lon", "isDeleted", "createdAt", "updatedAt", "owner", "organization", "advertisement"],
    PropertyCreateOrConnectWithoutLikesInput: ["where", "create"],
    UserUpsertWithoutSavesInput: ["update", "create"],
    UserUpdateWithoutSavesInput: ["id", "firstName", "lastName", "middleName", "status", "address", "property", "advertisement", "request", "isVerified", "isRegistrated", "isDeleted", "createdAt", "updatedAt", "organization"],
    PropertyUpsertWithoutLikesInput: ["update", "create"],
    PropertyUpdateWithoutLikesInput: ["id", "type", "acquisition", "state", "size", "price", "images", "amenities", "parkingCapacity", "seating", "bedrooms", "bathrooms", "description", "views", "source", "region", "city", "town", "streetName", "digitalAddress", "locationDesc", "lat", "lon", "isDeleted", "createdAt", "updatedAt", "owner", "organization", "advertisement"],
    OrganizationCreateWithoutAddressInput: ["id", "title", "members", "properties", "advertisement", "isVerified", "isRegistrated", "isDeleted", "createdAt", "updatedAt"],
    OrganizationCreateOrConnectWithoutAddressInput: ["where", "create"],
    UserCreateWithoutAddressInput: ["id", "firstName", "lastName", "middleName", "status", "property", "saves", "advertisement", "request", "isVerified", "isRegistrated", "isDeleted", "createdAt", "updatedAt", "organization"],
    UserCreateOrConnectWithoutAddressInput: ["where", "create"],
    OrganizationUpsertWithoutAddressInput: ["update", "create"],
    OrganizationUpdateWithoutAddressInput: ["id", "title", "members", "properties", "advertisement", "isVerified", "isRegistrated", "isDeleted", "createdAt", "updatedAt"],
    UserUpsertWithoutAddressInput: ["update", "create"],
    UserUpdateWithoutAddressInput: ["id", "firstName", "lastName", "middleName", "status", "property", "saves", "advertisement", "request", "isVerified", "isRegistrated", "isDeleted", "createdAt", "updatedAt", "organization"],
    LandSizeCreateWithoutPropertyInput: ["id", "measurement", "unit", "Property_Request"],
    LandSizeCreateOrConnectWithoutPropertyInput: ["where", "create"],
    PriceCreateWithoutPropertyInput: ["id", "figure", "currency", "duration", "advertisement", "Property_Request"],
    PriceCreateOrConnectWithoutPropertyInput: ["where", "create"],
    SaveCreateWithoutPropertyInput: ["id", "createdAt", "User"],
    SaveCreateOrConnectWithoutPropertyInput: ["where", "create"],
    SaveCreateManyPropertyInputEnvelope: ["data", "skipDuplicates"],
    UserCreateWithoutPropertyInput: ["id", "firstName", "lastName", "middleName", "status", "address", "saves", "advertisement", "request", "isVerified", "isRegistrated", "isDeleted", "createdAt", "updatedAt", "organization"],
    UserCreateOrConnectWithoutPropertyInput: ["where", "create"],
    OrganizationCreateWithoutPropertiesInput: ["id", "title", "address", "members", "advertisement", "isVerified", "isRegistrated", "isDeleted", "createdAt", "updatedAt"],
    OrganizationCreateOrConnectWithoutPropertiesInput: ["where", "create"],
    AdvertisementCreateWithoutPropertyInput: ["id", "price", "isExpired", "isPaused", "createdAt", "updatedAt", "user", "organization"],
    AdvertisementCreateOrConnectWithoutPropertyInput: ["where", "create"],
    AdvertisementCreateManyPropertyInputEnvelope: ["data", "skipDuplicates"],
    LandSizeUpsertWithoutPropertyInput: ["update", "create"],
    LandSizeUpdateWithoutPropertyInput: ["id", "measurement", "unit", "Property_Request"],
    PriceUpsertWithoutPropertyInput: ["update", "create"],
    PriceUpdateWithoutPropertyInput: ["id", "figure", "currency", "duration", "advertisement", "Property_Request"],
    SaveUpsertWithWhereUniqueWithoutPropertyInput: ["where", "update", "create"],
    SaveUpdateWithWhereUniqueWithoutPropertyInput: ["where", "data"],
    SaveUpdateManyWithWhereWithoutPropertyInput: ["where", "data"],
    UserUpsertWithoutPropertyInput: ["update", "create"],
    UserUpdateWithoutPropertyInput: ["id", "firstName", "lastName", "middleName", "status", "address", "saves", "advertisement", "request", "isVerified", "isRegistrated", "isDeleted", "createdAt", "updatedAt", "organization"],
    OrganizationUpsertWithoutPropertiesInput: ["update", "create"],
    OrganizationUpdateWithoutPropertiesInput: ["id", "title", "address", "members", "advertisement", "isVerified", "isRegistrated", "isDeleted", "createdAt", "updatedAt"],
    AdvertisementUpsertWithWhereUniqueWithoutPropertyInput: ["where", "update", "create"],
    AdvertisementUpdateWithWhereUniqueWithoutPropertyInput: ["where", "data"],
    AdvertisementUpdateManyWithWhereWithoutPropertyInput: ["where", "data"],
    PriceCreateWithoutProperty_RequestInput: ["id", "figure", "currency", "duration", "Property", "advertisement"],
    PriceCreateOrConnectWithoutProperty_RequestInput: ["where", "create"],
    PriceCreateManyProperty_RequestInputEnvelope: ["data", "skipDuplicates"],
    LandSizeCreateWithoutProperty_RequestInput: ["id", "measurement", "unit", "Property"],
    LandSizeCreateOrConnectWithoutProperty_RequestInput: ["where", "create"],
    UserCreateWithoutRequestInput: ["id", "firstName", "lastName", "middleName", "status", "address", "property", "saves", "advertisement", "isVerified", "isRegistrated", "isDeleted", "createdAt", "updatedAt", "organization"],
    UserCreateOrConnectWithoutRequestInput: ["where", "create"],
    PriceUpsertWithWhereUniqueWithoutProperty_RequestInput: ["where", "update", "create"],
    PriceUpdateWithWhereUniqueWithoutProperty_RequestInput: ["where", "data"],
    PriceUpdateManyWithWhereWithoutProperty_RequestInput: ["where", "data"],
    PriceScalarWhereInput: ["AND", "OR", "NOT", "id", "figure", "currency", "duration", "propertyId", "advertisementId", "property_RequestId"],
    LandSizeUpsertWithoutProperty_RequestInput: ["update", "create"],
    LandSizeUpdateWithoutProperty_RequestInput: ["id", "measurement", "unit", "Property"],
    UserUpsertWithoutRequestInput: ["update", "create"],
    UserUpdateWithoutRequestInput: ["id", "firstName", "lastName", "middleName", "status", "address", "property", "saves", "advertisement", "isVerified", "isRegistrated", "isDeleted", "createdAt", "updatedAt", "organization"],
    PriceCreateWithoutAdvertisementInput: ["id", "figure", "currency", "duration", "Property", "Property_Request"],
    PriceCreateOrConnectWithoutAdvertisementInput: ["where", "create"],
    UserCreateWithoutAdvertisementInput: ["id", "firstName", "lastName", "middleName", "status", "address", "property", "saves", "request", "isVerified", "isRegistrated", "isDeleted", "createdAt", "updatedAt", "organization"],
    UserCreateOrConnectWithoutAdvertisementInput: ["where", "create"],
    OrganizationCreateWithoutAdvertisementInput: ["id", "title", "address", "members", "properties", "isVerified", "isRegistrated", "isDeleted", "createdAt", "updatedAt"],
    OrganizationCreateOrConnectWithoutAdvertisementInput: ["where", "create"],
    PropertyCreateWithoutAdvertisementInput: ["id", "type", "acquisition", "state", "size", "price", "images", "amenities", "parkingCapacity", "seating", "bedrooms", "bathrooms", "description", "views", "likes", "source", "region", "city", "town", "streetName", "digitalAddress", "locationDesc", "lat", "lon", "isDeleted", "createdAt", "updatedAt", "owner", "organization"],
    PropertyCreateOrConnectWithoutAdvertisementInput: ["where", "create"],
    PriceUpsertWithoutAdvertisementInput: ["update", "create"],
    PriceUpdateWithoutAdvertisementInput: ["id", "figure", "currency", "duration", "Property", "Property_Request"],
    UserUpsertWithoutAdvertisementInput: ["update", "create"],
    UserUpdateWithoutAdvertisementInput: ["id", "firstName", "lastName", "middleName", "status", "address", "property", "saves", "request", "isVerified", "isRegistrated", "isDeleted", "createdAt", "updatedAt", "organization"],
    OrganizationUpsertWithoutAdvertisementInput: ["update", "create"],
    OrganizationUpdateWithoutAdvertisementInput: ["id", "title", "address", "members", "properties", "isVerified", "isRegistrated", "isDeleted", "createdAt", "updatedAt"],
    PropertyUpsertWithoutAdvertisementInput: ["update", "create"],
    PropertyUpdateWithoutAdvertisementInput: ["id", "type", "acquisition", "state", "size", "price", "images", "amenities", "parkingCapacity", "seating", "bedrooms", "bathrooms", "description", "views", "likes", "source", "region", "city", "town", "streetName", "digitalAddress", "locationDesc", "lat", "lon", "isDeleted", "createdAt", "updatedAt", "owner", "organization"],
    PropertyCreateWithoutPriceInput: ["id", "type", "acquisition", "state", "size", "images", "amenities", "parkingCapacity", "seating", "bedrooms", "bathrooms", "description", "views", "likes", "source", "region", "city", "town", "streetName", "digitalAddress", "locationDesc", "lat", "lon", "isDeleted", "createdAt", "updatedAt", "owner", "organization", "advertisement"],
    PropertyCreateOrConnectWithoutPriceInput: ["where", "create"],
    AdvertisementCreateWithoutPriceInput: ["id", "isExpired", "isPaused", "createdAt", "updatedAt", "user", "organization", "property"],
    AdvertisementCreateOrConnectWithoutPriceInput: ["where", "create"],
    Property_RequestCreateWithoutPriceRangeInput: ["id", "type", "acquisition", "state", "amenities", "size", "parkingCapacity", "seating", "bedrooms", "bathrooms", "additionalInfo", "region", "city", "town", "createdAt", "updatedAt", "user"],
    Property_RequestCreateOrConnectWithoutPriceRangeInput: ["where", "create"],
    PropertyUpsertWithoutPriceInput: ["update", "create"],
    PropertyUpdateWithoutPriceInput: ["id", "type", "acquisition", "state", "size", "images", "amenities", "parkingCapacity", "seating", "bedrooms", "bathrooms", "description", "views", "likes", "source", "region", "city", "town", "streetName", "digitalAddress", "locationDesc", "lat", "lon", "isDeleted", "createdAt", "updatedAt", "owner", "organization", "advertisement"],
    AdvertisementUpsertWithoutPriceInput: ["update", "create"],
    AdvertisementUpdateWithoutPriceInput: ["id", "isExpired", "isPaused", "createdAt", "updatedAt", "user", "organization", "property"],
    Property_RequestUpsertWithoutPriceRangeInput: ["update", "create"],
    Property_RequestUpdateWithoutPriceRangeInput: ["id", "type", "acquisition", "state", "amenities", "size", "parkingCapacity", "seating", "bedrooms", "bathrooms", "additionalInfo", "region", "city", "town", "createdAt", "updatedAt", "user"],
    PropertyCreateWithoutSizeInput: ["id", "type", "acquisition", "state", "price", "images", "amenities", "parkingCapacity", "seating", "bedrooms", "bathrooms", "description", "views", "likes", "source", "region", "city", "town", "streetName", "digitalAddress", "locationDesc", "lat", "lon", "isDeleted", "createdAt", "updatedAt", "owner", "organization", "advertisement"],
    PropertyCreateOrConnectWithoutSizeInput: ["where", "create"],
    Property_RequestCreateWithoutSizeInput: ["id", "type", "acquisition", "state", "priceRange", "amenities", "parkingCapacity", "seating", "bedrooms", "bathrooms", "additionalInfo", "region", "city", "town", "createdAt", "updatedAt", "user"],
    Property_RequestCreateOrConnectWithoutSizeInput: ["where", "create"],
    PropertyUpsertWithoutSizeInput: ["update", "create"],
    PropertyUpdateWithoutSizeInput: ["id", "type", "acquisition", "state", "price", "images", "amenities", "parkingCapacity", "seating", "bedrooms", "bathrooms", "description", "views", "likes", "source", "region", "city", "town", "streetName", "digitalAddress", "locationDesc", "lat", "lon", "isDeleted", "createdAt", "updatedAt", "owner", "organization", "advertisement"],
    Property_RequestUpsertWithoutSizeInput: ["update", "create"],
    Property_RequestUpdateWithoutSizeInput: ["id", "type", "acquisition", "state", "priceRange", "amenities", "parkingCapacity", "seating", "bedrooms", "bathrooms", "additionalInfo", "region", "city", "town", "createdAt", "updatedAt", "user"],
    UserCreateManyOrganizationInput: ["id", "firstName", "lastName", "middleName", "status", "isVerified", "isRegistrated", "isDeleted", "createdAt", "updatedAt"],
    PropertyCreateManyOrganizationInput: ["id", "type", "acquisition", "state", "images", "amenities", "parkingCapacity", "seating", "bedrooms", "bathrooms", "description", "views", "source", "region", "city", "town", "streetName", "digitalAddress", "locationDesc", "lat", "lon", "isDeleted", "createdAt", "updatedAt", "userId"],
    AdvertisementCreateManyOrganizationInput: ["id", "isExpired", "isPaused", "createdAt", "updatedAt", "userId", "propertyId"],
    UserUpdateWithoutOrganizationInput: ["id", "firstName", "lastName", "middleName", "status", "address", "property", "saves", "advertisement", "request", "isVerified", "isRegistrated", "isDeleted", "createdAt", "updatedAt"],
    PropertyUpdateWithoutOrganizationInput: ["id", "type", "acquisition", "state", "size", "price", "images", "amenities", "parkingCapacity", "seating", "bedrooms", "bathrooms", "description", "views", "likes", "source", "region", "city", "town", "streetName", "digitalAddress", "locationDesc", "lat", "lon", "isDeleted", "createdAt", "updatedAt", "owner", "advertisement"],
    AdvertisementUpdateWithoutOrganizationInput: ["id", "price", "isExpired", "isPaused", "createdAt", "updatedAt", "user", "property"],
    PropertyCreateManyOwnerInput: ["id", "type", "acquisition", "state", "images", "amenities", "parkingCapacity", "seating", "bedrooms", "bathrooms", "description", "views", "source", "region", "city", "town", "streetName", "digitalAddress", "locationDesc", "lat", "lon", "isDeleted", "createdAt", "updatedAt", "organizationId"],
    SaveCreateManyUserInput: ["id", "createdAt", "propertyId"],
    AdvertisementCreateManyUserInput: ["id", "isExpired", "isPaused", "createdAt", "updatedAt", "organizationId", "propertyId"],
    Property_RequestCreateManyUserInput: ["id", "type", "acquisition", "state", "amenities", "parkingCapacity", "seating", "bedrooms", "bathrooms", "additionalInfo", "region", "city", "town", "createdAt", "updatedAt"],
    PropertyUpdateWithoutOwnerInput: ["id", "type", "acquisition", "state", "size", "price", "images", "amenities", "parkingCapacity", "seating", "bedrooms", "bathrooms", "description", "views", "likes", "source", "region", "city", "town", "streetName", "digitalAddress", "locationDesc", "lat", "lon", "isDeleted", "createdAt", "updatedAt", "organization", "advertisement"],
    SaveUpdateWithoutUserInput: ["id", "createdAt", "Property"],
    AdvertisementUpdateWithoutUserInput: ["id", "price", "isExpired", "isPaused", "createdAt", "updatedAt", "organization", "property"],
    Property_RequestUpdateWithoutUserInput: ["id", "type", "acquisition", "state", "priceRange", "amenities", "size", "parkingCapacity", "seating", "bedrooms", "bathrooms", "additionalInfo", "region", "city", "town", "createdAt", "updatedAt"],
    SaveCreateManyPropertyInput: ["id", "createdAt", "userId"],
    AdvertisementCreateManyPropertyInput: ["id", "isExpired", "isPaused", "createdAt", "updatedAt", "userId", "organizationId"],
    SaveUpdateWithoutPropertyInput: ["id", "createdAt", "User"],
    AdvertisementUpdateWithoutPropertyInput: ["id", "price", "isExpired", "isPaused", "createdAt", "updatedAt", "user", "organization"],
    PriceCreateManyProperty_RequestInput: ["id", "figure", "currency", "duration", "propertyId", "advertisementId"],
    PriceUpdateWithoutProperty_RequestInput: ["id", "figure", "currency", "duration", "Property", "advertisement"]
};
function applyInputTypesEnhanceMap(inputTypesEnhanceMap) {
    for (const inputTypeEnhanceMapKey of Object.keys(inputTypesEnhanceMap)) {
        const inputTypeName = inputTypeEnhanceMapKey;
        const typeConfig = inputTypesEnhanceMap[inputTypeName];
        const typeClass = inputTypes[inputTypeName];
        const typeTarget = typeClass.prototype;
        applyTypeClassEnhanceConfig(typeConfig, typeClass, typeTarget, inputsInfo[inputTypeName]);
    }
}
exports.applyInputTypesEnhanceMap = applyInputTypesEnhanceMap;
